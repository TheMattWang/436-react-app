{"ast":null,"code":"var _jsxFileName = \"/Users/mattwang/Documents/deg-plan/frontend/src/components/chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hi! How can I assist you with your degreee plan today?\"\n  }]);\n  const [userInput, setUserInput] = useState(\"\");\n  const handleSendMessage = () => {\n    if (userInput.trim() === \"\") return;\n\n    // Add user message to the chat\n    setMessages(prev => [...prev, {\n      sender: \"user\",\n      text: userInput\n    }]);\n\n    // Clear input field\n    setUserInput(\"\");\n\n    // Add a simple bot response (you can integrate OpenAI API here)\n    setTimeout(() => {\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: \"This is a response from the chatbot.\"\n      }]);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: chatbotContainerStyles,\n    children: [isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: chatboxStyles,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: chatboxHeaderStyles,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Reveille\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: closeButtonStyles,\n          onClick: () => setIsOpen(false),\n          children: \"\\u2716\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: chatboxBodyStyles,\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: message.sender === \"bot\" ? botMessageStyles : userMessageStyles,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: chatboxFooterStyles,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"Type a message...\",\n          style: inputStyles\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          style: sendButtonStyles,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), !isOpen && /*#__PURE__*/_jsxDEV(\"button\", {\n      style: chatButtonStyles,\n      onClick: () => setIsOpen(true),\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n// Styles\n_s(Chatbot, \"wXCepgHGzuXViTmFyMl8nO43gJ8=\");\n_c = Chatbot;\nconst chatbotContainerStyles = {\n  position: \"fixed\",\n  bottom: \"20px\",\n  right: \"20px\",\n  // Change to right-hand side\n  zIndex: 1000\n};\nconst chatboxStyles = {\n  width: \"300px\",\n  height: \"400px\",\n  backgroundColor: \"#FFFFFF\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"10px\",\n  boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\",\n  display: \"flex\",\n  flexDirection: \"column\"\n};\nconst chatboxHeaderStyles = {\n  backgroundColor: \"#7B0000\",\n  // Texas A&M maroon\n  color: \"#fff\",\n  padding: \"10px\",\n  borderTopLeftRadius: \"10px\",\n  borderTopRightRadius: \"10px\",\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\"\n};\nconst closeButtonStyles = {\n  backgroundColor: \"transparent\",\n  color: \"#fff\",\n  border: \"none\",\n  fontSize: \"16px\",\n  cursor: \"pointer\"\n};\nconst chatboxBodyStyles = {\n  flex: 1,\n  padding: \"10px\",\n  overflowY: \"auto\" // Scrollable content\n};\nconst chatboxFooterStyles = {\n  display: \"flex\",\n  padding: \"10px\",\n  borderTop: \"1px solid #ccc\"\n};\nconst inputStyles = {\n  flex: 1,\n  padding: \"8px\",\n  borderRadius: \"5px\",\n  border: \"1px solid #ccc\",\n  marginRight: \"10px\"\n};\nconst sendButtonStyles = {\n  backgroundColor: \"#7B0000\",\n  color: \"#fff\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  padding: \"8px 12px\",\n  cursor: \"pointer\"\n};\nconst chatButtonStyles = {\n  backgroundColor: \"#7B0000\",\n  // Texas A&M maroon\n  color: \"#fff\",\n  border: \"none\",\n  borderRadius: \"50%\",\n  width: \"60px\",\n  height: \"60px\",\n  fontSize: \"24px\",\n  cursor: \"pointer\",\n  boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\"\n};\nconst botMessageStyles = {\n  backgroundColor: \"#f1f0f0\",\n  color: \"#000\",\n  padding: \"8px\",\n  borderRadius: \"10px\",\n  marginBottom: \"8px\",\n  alignSelf: \"flex-start\"\n};\nconst userMessageStyles = {\n  backgroundColor: \"#7B0000\",\n  color: \"#fff\",\n  padding: \"8px\",\n  borderRadius: \"10px\",\n  marginBottom: \"8px\",\n  alignSelf: \"flex-end\"\n};\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","sender","text","userInput","setUserInput","handleSendMessage","trim","prev","setTimeout","style","chatbotContainerStyles","children","chatboxStyles","chatboxHeaderStyles","fileName","_jsxFileName","lineNumber","columnNumber","closeButtonStyles","onClick","chatboxBodyStyles","map","message","index","botMessageStyles","userMessageStyles","chatboxFooterStyles","type","value","onChange","e","target","placeholder","inputStyles","sendButtonStyles","chatButtonStyles","_c","position","bottom","right","zIndex","width","height","backgroundColor","border","borderRadius","boxShadow","display","flexDirection","color","padding","borderTopLeftRadius","borderTopRightRadius","justifyContent","alignItems","fontSize","cursor","flex","overflowY","borderTop","marginRight","marginBottom","alignSelf","$RefreshReg$"],"sources":["/Users/mattwang/Documents/deg-plan/frontend/src/components/chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst Chatbot = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([{ sender: \"bot\", text: \"Hi! How can I assist you with your degreee plan today?\" }]);\n  const [userInput, setUserInput] = useState(\"\");\n\n  const handleSendMessage = () => {\n    if (userInput.trim() === \"\") return;\n\n    // Add user message to the chat\n    setMessages((prev) => [...prev, { sender: \"user\", text: userInput }]);\n\n    // Clear input field\n    setUserInput(\"\");\n\n    // Add a simple bot response (you can integrate OpenAI API here)\n    setTimeout(() => {\n      setMessages((prev) => [...prev, { sender: \"bot\", text: \"This is a response from the chatbot.\" }]);\n    }, 1000);\n  };\n\n  return (\n    <div style={chatbotContainerStyles}>\n      {isOpen && (\n        <div style={chatboxStyles}>\n          <div style={chatboxHeaderStyles}>\n            <h4>Reveille</h4>\n            <button style={closeButtonStyles} onClick={() => setIsOpen(false)}>\n              âœ–\n            </button>\n          </div>\n          <div style={chatboxBodyStyles}>\n            {messages.map((message, index) => (\n              <div\n                key={index}\n                style={message.sender === \"bot\" ? botMessageStyles : userMessageStyles}\n              >\n                {message.text}\n              </div>\n            ))}\n          </div>\n          <div style={chatboxFooterStyles}>\n            <input\n              type=\"text\"\n              value={userInput}\n              onChange={(e) => setUserInput(e.target.value)}\n              placeholder=\"Type a message...\"\n              style={inputStyles}\n            />\n            <button onClick={handleSendMessage} style={sendButtonStyles}>\n              Send\n            </button>\n          </div>\n        </div>\n      )}\n      {!isOpen && (\n        <button style={chatButtonStyles} onClick={() => setIsOpen(true)}>\n          ðŸ’¬\n        </button>\n      )}\n    </div>\n  );\n};\n\n// Styles\nconst chatbotContainerStyles = {\n  position: \"fixed\",\n  bottom: \"20px\",\n  right: \"20px\", // Change to right-hand side\n  zIndex: 1000,\n};\n\nconst chatboxStyles = {\n  width: \"300px\",\n  height: \"400px\",\n  backgroundColor: \"#FFFFFF\",\n  border: \"1px solid #ccc\",\n  borderRadius: \"10px\",\n  boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\",\n  display: \"flex\",\n  flexDirection: \"column\",\n};\n\nconst chatboxHeaderStyles = {\n  backgroundColor: \"#7B0000\", // Texas A&M maroon\n  color: \"#fff\",\n  padding: \"10px\",\n  borderTopLeftRadius: \"10px\",\n  borderTopRightRadius: \"10px\",\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n};\n\nconst closeButtonStyles = {\n  backgroundColor: \"transparent\",\n  color: \"#fff\",\n  border: \"none\",\n  fontSize: \"16px\",\n  cursor: \"pointer\",\n};\n\nconst chatboxBodyStyles = {\n  flex: 1,\n  padding: \"10px\",\n  overflowY: \"auto\", // Scrollable content\n};\n\nconst chatboxFooterStyles = {\n  display: \"flex\",\n  padding: \"10px\",\n  borderTop: \"1px solid #ccc\",\n};\n\nconst inputStyles = {\n  flex: 1,\n  padding: \"8px\",\n  borderRadius: \"5px\",\n  border: \"1px solid #ccc\",\n  marginRight: \"10px\",\n};\n\nconst sendButtonStyles = {\n  backgroundColor: \"#7B0000\",\n  color: \"#fff\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  padding: \"8px 12px\",\n  cursor: \"pointer\",\n};\n\nconst chatButtonStyles = {\n  backgroundColor: \"#7B0000\", // Texas A&M maroon\n  color: \"#fff\",\n  border: \"none\",\n  borderRadius: \"50%\",\n  width: \"60px\",\n  height: \"60px\",\n  fontSize: \"24px\",\n  cursor: \"pointer\",\n  boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\",\n};\n\nconst botMessageStyles = {\n  backgroundColor: \"#f1f0f0\",\n  color: \"#000\",\n  padding: \"8px\",\n  borderRadius: \"10px\",\n  marginBottom: \"8px\",\n  alignSelf: \"flex-start\",\n};\n\nconst userMessageStyles = {\n  backgroundColor: \"#7B0000\",\n  color: \"#fff\",\n  padding: \"8px\",\n  borderRadius: \"10px\",\n  marginBottom: \"8px\",\n  alignSelf: \"flex-end\",\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}